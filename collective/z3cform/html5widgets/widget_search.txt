============
Search Widget
============

Like any widget, it provides the ``IWidget`` interface:

  >>> from zope.interface.verify import verifyClass
  >>> from z3c.form import interfaces
  >>> from collective.z3cform.html5widgets.widget_search import SearchWidget

  >>> verifyClass(interfaces.IWidget, SearchWidget)
  True

There are also more specific interfaces for this widget:

  >>> from collective.z3cform.html5widgets.widget_search import ISearchWidget
  >>> verifyClass(ISearchWidget, SearchWidget)
  True

The widgets can be instantiated only using the request:

  >>> from z3c.form.testing import TestRequest
  >>> request = TestRequest()
  >>> search_widget = SearchWidget(request)

Before rendering a widget, one has to set the name and id of the widget:

  >>> search_widget.id = 'widget.id.search'
  >>> search_widget.name = 'widget.name.search'

We also need to register the templates for the widgets:

  >>> import zope.component
  >>> from zope.pagetemplate.interfaces import IPageTemplate
  >>> from z3c.form.widget import WidgetTemplateFactory

  >>> def getPath(filename):
  ...     import os.path
  ...     import collective.z3cform.html5widgets
  ...     return os.path.join(os.path.dirname(collective.z3cform.html5widgets.__file__), 'templates', filename)

  >>> zope.component.provideAdapter(
  ...     WidgetTemplateFactory(getPath('html5_input.pt'), 'text/html'),
  ...     (None, None, None, None, ISearchWidget),
  ...     IPageTemplate, name=interfaces.INPUT_MODE)

If we render the widget as this we get an input element in a simple wrapper.
Later, we will show more advanced functionality when using a field-widget.

  >>> search_widget.update()
  >>> print(search_widget.render())
    <input id="widget.id.search" name="widget.name.search"
           class="html5-search-widget" type="search" />

We can extract simple data

  >>> search_widget.request = TestRequest(form={'widget.name.search': 'term'})
  >>> search_widget.update()
  >>> search_widget.extract()
  'term'

The rendering is unchanged.

  >>> print(search_widget.render())
  <input id="widget.id.search" name="widget.name.search"
         class="html5-search-widget"
         value="term" type="search" />

If nothing is found in the request, the default is returned:

  >>> search_widget.request = TestRequest()
  >>> search_widget.update()
  >>> search_widget.extract()
  <NO_VALUE>

